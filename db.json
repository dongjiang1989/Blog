{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/index.md","hash":"03f016cd9756a6afae159556ad5a98998717a49c","modified":1578647071130},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1578638388678},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1578638388678},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1578638388679},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1578638388679},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1578638388680},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1578638388680},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1578638388678},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1578638388680},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1578638388680},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1578638388680},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1578638388681},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1578638388681},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1578638388682},{"_id":"themes/next/_config.yml","hash":"535de24e71e2eab76d5184cb49298828561ebb84","modified":1578725921162},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1578638388682},{"_id":"themes/next/package.json","hash":"2b7f3a16fb9511e328f4f41a025fa7030fa8f832","modified":1578708215635},{"_id":"source/_posts/CNI.md","hash":"96db5485724ad12e2efcca34aaad2f65d095e204","modified":1579417283740},{"_id":"source/_posts/common.md","hash":"376890820a0b21b4b054358cfb620a0ce167559e","modified":1579495323369},{"_id":"source/about/index.md","hash":"3c33fde1b2159ca66c2215f26859cc9f11e76ae6","modified":1579058204697},{"_id":"source/archives/index.md","hash":"5f00caa80be501455595874bfeaa303b40e238e6","modified":1578710264177},{"_id":"source/_posts/CNI1.md","hash":"b0f950d2fda2b2236975d269f7142cfd85181be1","modified":1579419247631},{"_id":"source/categories/index.md","hash":"e8ebb07c08a817d8496e71273e08f64252b4eabb","modified":1578710278194},{"_id":"source/learn/index.md","hash":"fd508f65486358c831e8f0f7a5c9ac8048a273b2","modified":1578540985225},{"_id":"source/schedule/index.md","hash":"1e4f5c8dea6f3b129e007a98e234a58b39ed3996","modified":1578710229487},{"_id":"themes/next/package-lock.json","hash":"359e4e2c42d89bf75478f84285a8c7040204abb2","modified":1578708215717},{"_id":"source/tags/index.md","hash":"80f1d7451eb987c46246329b4366a8204d87a039","modified":1579058076403},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1578638388679},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1578638388679},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1578638388679},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1578638388679},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1578638388682},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1578638388682},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1578638388682},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1578638388683},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1578638388683},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1578638388683},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1578638388683},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1578638388684},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1578638388684},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1578638388684},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1578638388683},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1578638388685},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1578638388685},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1578638388684},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1578638388684},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1578638388685},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1578638388686},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1578638388709},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1578638388710},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1578638388710},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1578638388710},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1578638388710},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1578638388711},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1578638388712},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1578638388712},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1578638388818},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1578638388818},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1578638388818},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1578638388713},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578638388752},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578638388685},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578638388686},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1578638388686},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1578638388687},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1578638388687},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1578638388687},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1578638388687},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1578638388688},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1578638388688},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1578638388688},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1578638388689},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1578638388688},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1578638388689},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1578638388690},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1578638388690},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1578638388692},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1578638388693},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1578638388697},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1578638388706},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1578638388706},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1578638388705},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1578638388705},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1578638388707},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1578638388706},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1578638388707},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1578638388714},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1578638388714},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1578638388714},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1578638388715},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1578638388715},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1578638388715},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1578638388716},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1578638388716},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1578638388716},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1578638388752},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1578638388752},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1578638388753},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1578638388753},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1578638388754},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1578638388755},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1578638388754},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1578638388755},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1578638388755},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1578638388756},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1578638388756},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1578638388756},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1578638388757},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578638388757},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1578638388758},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578638388758},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1578638388757},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1578638388758},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1578638388758},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578638388694},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578638388695},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578638388742},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578638388742},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578638388743},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578638388750},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578638388751},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1578638388689},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1578638388689},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1578638388691},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1578638388691},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1578638388692},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1578638388690},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1578638388692},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1578638388691},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1578638388690},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1578638388693},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1578638388694},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1578638388696},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1578638388698},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1578638388698},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1578638388698},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1578638388699},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1578638388699},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1578638388699},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1578638388701},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1578638388700},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1578638388700},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1578638388700},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1578638388701},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1578638388701},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1578638388702},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1578638388702},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1578638388702},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1578638388703},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1578638388703},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1578638388704},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1578638388704},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1578638388704},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1578638388704},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1578638388705},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1578638388708},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1578638388709},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1578638388709},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1578638388708},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1578638388742},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1578638388741},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1578638388743},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1578638388743},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1578638388750},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1578638388750},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1578638388751},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1578638388751},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1578638388769},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1578638388773},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1578638388772},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1578638388773},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1578638388773},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1578638388779},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1578638388779},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1578638388779},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1578638388779},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1578638388781},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1578638388781},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1578638388782},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1578638388782},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1578638388782},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1578638388797},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1578638388798},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1578638388799},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1578638388799},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1578638388799},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1578638388799},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1578638388800},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1578638388801},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1578638388800},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1578638388801},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1578638388802},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1578638388802},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1578638388802},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1578638388803},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1578638388803},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1578638388803},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1578638388804},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1578638388804},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1578638388804},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1578638388805},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1578638388804},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1578638388805},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1578638388805},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1578638388806},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1578638388806},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1578638388807},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1578638388807},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1578638388813},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1578638388814},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1578638388817},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1578638388816},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1578638388817},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1578638388759},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1578638388760},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1578638388760},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1578638388759},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1578638388760},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1578638388760},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1578638388761},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1578638388761},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1578638388762},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1578638388762},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1578638388763},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1578638388798},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1578638388708},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1578638388707},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1578638388718},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1578638388717},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1578638388717},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1578638388717},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1578638388718},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1578638388723},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1578638388732},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1578638388740},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1578638388740},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1578638388741},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1578638388741},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1578638388740},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1578638388741},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1578638388739},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1578638388743},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1578638388744},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1578638388745},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1578638388745},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1578638388745},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1578638388745},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1578638388744},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1578638388744},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1578638388747},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1578638388747},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1578638388748},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1578638388747},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1578638388748},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1578638388749},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1578638388749},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1578638388749},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1578638388749},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1578638388746},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1578638388747},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1578638388768},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1578638388774},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1578638388768},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1578638388775},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1578638388775},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1578638388774},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1578638388775},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1578638388777},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1578638388778},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1578638388775},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1578638388780},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1578638388778},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1578638388780},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1578638388783},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1578638388783},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1578638388784},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1578638388762},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1578638388813},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1578638388812},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1578638388766},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1578638388767},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1578638388796},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1578638388816},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1578638388796},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1578638388718},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1578638388719},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1578638388719},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1578638388719},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1578638388721},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1578638388720},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1578638388721},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1578638388722},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1578638388720},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1578638388721},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1578638388722},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1578638388722},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1578638388722},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1578638388723},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1578638388723},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1578638388724},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1578638388724},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1578638388724},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1578638388725},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1578638388725},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1578638388725},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1578638388726},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1578638388726},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1578638388727},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1578638388726},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1578638388727},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1578638388727},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1578638388728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1578638388729},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1578638388729},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1578638388729},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1578638388730},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"828f462df4aaa3a2183315ef773d5e63a287ab84","modified":1578710510634},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1578638388730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1578638388730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1578638388731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1578638388731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1578638388731},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1578638388732},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1578638388732},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1578638388733},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1578638388733},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1578638388734},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1578638388733},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1578638388734},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1578638388734},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1578638388735},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1578638388735},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1578638388735},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1578638388736},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1578638388736},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1578638388736},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1578638388737},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1578638388737},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1578638388737},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1578638388738},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1578638388738},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1578638388739},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1578638388746},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1578638388746},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1578638388748},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1578638388764},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1578638388764},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1578638388765},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1578638388765},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1578638388765},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1578638388776},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1578638388776},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1578638388776},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1578638388777},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1578638388777},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1578638388777},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1578638388795},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1578638388788},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1578638388786},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1578638388772},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1578638388811},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1578638388792},{"_id":"public/atom.xml","hash":"3800c821a93696711203c51ad8997c966e6b53ea","modified":1579495343852},{"_id":"public/sitemap.xml","hash":"939d97870694ba69357c68918b73884edc3e661e","modified":1579495343852},{"_id":"public/about/index.html","hash":"8815d16abc42b4609c82a2e26d39e8b3e8d01bd1","modified":1579495343852},{"_id":"public/archives/index.html","hash":"d6bd47a40ad4e0e2327ca69d1286746eaebccd9f","modified":1579495343852},{"_id":"public/categories/index.html","hash":"c704eb1e4ef604cf675247723a4bf7eb7394de84","modified":1579495343852},{"_id":"public/learn/index.html","hash":"c9c8284beafe61ab149c23ea0e792203f5e44aaf","modified":1579495343852},{"_id":"public/schedule/index.html","hash":"7d078ac21ebe15adccf6b39d3257362648d3fb13","modified":1579495343852},{"_id":"public/tags/index.html","hash":"33f2277371100a011c7abd44f7e0b2c09a2a9f0a","modified":1579495343852},{"_id":"public/archives/2020/index.html","hash":"3eaf94ded9704a4a97f23ffba2466a1148f75b3a","modified":1579495343852},{"_id":"public/archives/2020/01/index.html","hash":"5c11469deeb4eb6510d35b7cf923f25ff33a7025","modified":1579495343852},{"_id":"public/tags/K8S-Container-Network-Interface/index.html","hash":"86e7c854f75c569dd6c1ab30ea26e817f96b24ff","modified":1579495343852},{"_id":"public/index.html","hash":"9dcecc4954c03e1a8659b402c3654034b3192acc","modified":1579495343852},{"_id":"public/2020/01/19/CNI1/index.html","hash":"4fac171b9fabf2858e4d1db61be515fc92d98277","modified":1579495343852},{"_id":"public/2020/01/15/CNI/index.html","hash":"a2ea745efa291b7f4e0808bf30b2cfbd05519a52","modified":1579495343852},{"_id":"public/2020/01/14/common/index.html","hash":"efb12615b5ee98007464bb07b2f3cf477250ac90","modified":1579495343852},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579495343852},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579495343852},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1579495343852},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579495343852},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579495343852},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579495343852},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579495343852},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579495343852},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579495343852},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579495343852},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579495343852},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579495343852},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1579495343852},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579495343852},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1579495343852},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1579495343852},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579495343852},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1579495343852},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1579495343852},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579495343852},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579495343852},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579495343852},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579495343852},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579495343852},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579495343852},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579495343852},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579495343852},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1579495343852},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1579495343852},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1579495343852},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1579495343852},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579495343852},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1579495343852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579495343852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579495343852},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1579495343852},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1579495343852},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1579495343852},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1579495343852},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1579495343852},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1579495343852},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1579495343852},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1579495343852},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1579495343852},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1579495343852},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1579495343852},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1579495343852},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1579495343852},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1579495343852},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1579495343852},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1579495343852},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1579495343852},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1579495343852},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1579495343852},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1579495343852},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1579495343852},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1579495343852},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1579495343852},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1579495343852},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1579495343852},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1579495343852},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1579495343852},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1579495343852},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1579495343852},{"_id":"public/css/main.css","hash":"422514cd8b4e4f84bc9f2ee1a4faf9dc246573eb","modified":1579495343852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1579495343852},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1579495343852},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1579495343852},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1579495343852},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1579495343852},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579495343852},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1579495343852},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1579495343852},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1579495343852},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1579495343852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579495343852},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1579495343852},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1579495343852},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1579495343852},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579495343852},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1579495343852},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1579495343852},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1579495343852},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1579495343852},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579495343852},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1579495343852},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1579495343852},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1579495343852},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1579495343852},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1579495343852},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1579495343852},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1579495343852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1579495343852},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1579495343852},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1579495343852},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1579495343852},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1579495343852}],"Category":[],"Data":[],"Page":[{"title":"title test","tags":["aaa","aaaddd"],"_content":"\n<!-- more -->\n\n# Test\n","source":"index.md","raw":"\n---\n\ntitle: title test\n\ntags:\n - aaa\n - aaaddd\n\n---\n\n<!-- more -->\n\n# Test\n","date":"2020-01-10T09:04:31.130Z","updated":"2020-01-10T09:04:31.130Z","path":"index.html","comments":1,"layout":"page","_id":"ck5lyqwon00000d5p63br13ae","content":"<a id=\"more\"></a>\n\n<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>"},{"title":"关于","date":"2020-01-11T06:31:30.000Z","discription":"本Blog是将工作中遇到的问题，Share出来和大家分享","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2020-01-11 14:31:30\ndiscription: 本Blog是将工作中遇到的问题，Share出来和大家分享\n---\n","updated":"2020-01-15T03:16:44.697Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck5lyqwvj00020d5p9m3582x7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"archives","date":"2020-01-11T02:37:44.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2020-01-11 10:37:44\n---\n","updated":"2020-01-11T02:37:44.177Z","path":"archives/index.html","comments":1,"layout":"page","_id":"ck5lyqwvo00040d5pgdajb1sj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-01-11T02:37:58.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-11 10:37:58\n---\n","updated":"2020-01-11T02:37:58.194Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck5lyqwvv00070d5p5qcoffii","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!-- more -->\n\n---\n\ntitle: k8s\n\nlayout: page\n\n---\n\n<!-- more -->\n\n# Test\n","source":"learn/index.md","raw":"<!-- more -->\n\n---\n\ntitle: k8s\n\nlayout: page\n\n---\n\n<!-- more -->\n\n# Test\n","date":"2020-01-09T03:36:25.226Z","updated":"2020-01-09T03:36:25.225Z","path":"learn/index.html","title":"","comments":1,"layout":"page","_id":"ck5lyqwvz00080d5peh0ndofq","content":"<a id=\"more\"></a>\n\n<hr>\n<p>title: k8s</p>\n<p>layout: page</p>\n<hr>\n<!-- more -->\n\n<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: k8s</p>\n<p>layout: page</p>\n<hr>\n<!-- more -->\n\n<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>"},{"title":"schedule","date":"2020-01-11T02:37:09.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2020-01-11 10:37:09\n---\n","updated":"2020-01-11T02:37:09.487Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ck5lyqww2000a0d5p20pseicv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-01-10T08:23:39.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-01-10 16:23:39\n---\n","updated":"2020-01-15T03:14:36.403Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck5lyqww6000c0d5pa1473sxv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CNI (一)","date":"2020-01-15T02:45:57.000Z","description":"Container Network Interface - networking for Linux containers","_content":"\n# CNI（第一篇）\n\n## 介绍\n\nCNI（容器网络接口）是一个规范和库，用于编写用于在Linux容器中配置网络接口的插件以及许多受支持的插件组成。\n\nCNI包括几部分： \n\n> golang SDK Lib, 用于集成实现网络通信接口；\n\n> Template，用于生成自定义的CNI插件，标准代码工程；\n\n> 标准Document，包括社区公约、描述、roadmaps、milestone等\n\n## 使用方式\n\n### cnitool 介绍\n\ncnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。\n\n```golang\nconst (\n\tEnvCNIPath        = \"CNI_PATH\"   //CNI Adapter bin文件路径（bin的编译需要去掉cgo）\n\tEnvNetDir         = \"NETCONFPATH\"  //部署（添加、删除、检查）adapter需要的json配置文件路径\n\tEnvCapabilityArgs = \"CAP_ARGS\"  // CAP 参数\n\tEnvCNIArgs        = \"CNI_ARGS\"  // adapter 外部传递的参数，一般不用，将args放在json文件中\n\tEnvCNIIfname      = \"CNI_IFNAME\"  // 设置的容器网卡名称，如eth0\n\n\tDefaultNetDir = \"/etc/cni/net.d\" // 默认CNI 插件路径\n\n\t// 以下部分是 插件 添加方式\n\tCmdAdd   = \"add\"\n\tCmdCheck = \"check\"\n\tCmdDel   = \"del\"\n)\n```\n\n### 插件使用\n\n准备二进制插件：\n```bash\ngo get github.com/containernetworking/plugins\ngo build ptp -o myptp\n```\n\n\n准备网络配置：\n```bash\necho `\n{\n\t\"cniVersion\": \"0.4.0\",\n\t\"name\": \"myptp\",\n\t\"type\": \"ptp\",  //veth pair\n\t\"ipMasq\": true,\n\t\"ipam\": {\n\t\t\"type\": \"host-local\",\n\t\t\"subnet\": \"172.16.29.0/24\",\n\t\t\"routes\": [{\n\t\t\t\"dst\": \"0.0.0.0/0\"\n\t\t}]\n\t}\n}` > /etc/cni/net.d/myptp.conflist\n```\n\n准备好配置后部署容器网络：\n\n第一步：创建网络Namespace， 添加名称为mytest_network\n```bash\nsudo ip netns add mytest_network\n```\n\n第二步：添加容器网络myptp\n```bash\nsudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network\n```\n\n第三步：调测网络\n```bash\nsudo ip -n mytest_network addr\nsudo ip netns exec mytest_network ping -c 1 4.2.2.2\n```\n\n最后，清理网络\n```bash\nsudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network\nsudo ip netns del mytest_network\n```\n\n### cnitool调用插件\n正如上面的例子：`cnitool add myptp /var/run/netns/mytest_network`\n> 参数0是cnitool工具名称\n> 参数1是操作名称（add、del、check）\n> 参数3是加载的配置对象 `myptp.*` 文件对象\n> 参数4是 net namespace 名称\n\n解析过程：\n```golang\nimport (\n\t...\n\t\"github.com/containernetworking/cni/libcni\"  // golang lib SDK\n)\n\nfunc main() {\n\tif len(os.Args) < 4 {  // 判断参数\n\t\tusage()\n\t\treturn\n\t}\n\n\tnetdir := os.Getenv(EnvNetDir)  //加载conf文件地址\n\tif netdir == \"\" {\n\t\tnetdir = DefaultNetDir\n\t}\n\tnetconf, err := libcni.LoadConfList(netdir, os.Args[2])\n\tif err != nil {\n\t\texit(err)\n\t}\n\n\t... \n\n\n\tifName, ok := os.LookupEnv(EnvCNIIfname) // 加载网卡\n\tif !ok {\n\t\tifName = \"eth0\"\n\t}\n\n\t...\n\n\tnetns := os.Args[3]    //获得 new working namespace\n\tnetns, err = filepath.Abs(netns)\n\tif err != nil {\n\t\texit(err)\n\t}\n\n\t...\n\n\t// CNI runtime object\n\tcninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), nil)\n\trt := &libcni.RuntimeConf{\n\t\tContainerID:    fmt.Sprintf(\"cnitool-%x\", ha512.Sum512([]byte(netns))[:10]),\n\t\tNetNS:          netns,\n\t\tIfName:         ifName,\n\t\tArgs:           cniArgs,\n\t\tCapabilityArgs: capabilityArgs,\n\t}\n\n\t...\n\n\t// CNI 具体执行方式\n\tswitch os.Args[1] {\n\tcase CmdAdd:\n\t\tresult, err := cninet.AddNetworkList(context.TODO(), netconf, rt)\n\t\tif result != nil {\n\t\t\t_ = result.Print()\n\t\t}\n\t\texit(err)\n\tcase CmdCheck:\n\t\terr := cninet.CheckNetworkList(context.TODO(), netconf, rt)\n\t\texit(err)\n\tcase CmdDel:\n\t\texit(cninet.DelNetworkList(context.TODO(), netconf, rt))\n\t}\n}\n\n```\n\n## Golang libcni SDK\nSDK核心的interface 接口定义：\n```golang\nimport(\n\t\"github.com/containernetworking/cni/pkg/invoke\" //syscall 具体调用\n\t\"github.com/containernetworking/cni/pkg/types\" // 网络adapter管理，使用Plugin Chains模型进行关联\n\t\"github.com/containernetworking/cni/pkg/utils\" // 公共方法：cni conf file中各个字段ValidCheck\n\t\"github.com/containernetworking/cni/pkg/version\" // version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容\n)\ntype CNI interface {\n\tAddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)\n\tCheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error\n\tDelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error\n\tGetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)\n\tGetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]byte, *RuntimeConf, error)\n\n\t//以下3个最核心接口\n\tAddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)\n\tCheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error\n\tDelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error\n\n\tGetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)\n\tGetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]byte, *RuntimeConf, error)\n\n\tValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]string, error)\n\tValidateNetwork(ctx context.Context, net *NetworkConfig) ([]string, error)\n}\n\ntype CNIConfig struct {\n\tPath     []string\n\texec     invoke.Exec\n\tcacheDir string\n}\n\nvar _ CNI = &CNIConfig{} // *注意，将CNIConfig{}对象指针都是CNI接口的实现实例；\n```\n\n### 核心接口分析\n```golang\nfunc (c *CNIConfig) addNetwork(ctx context.Context, name, cniVersion string, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf) (types.Result, error) {\n\tc.ensureExec()  // 添加数据平台\n\tpluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateContainerID(rt.ContainerID); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateNetworkName(name); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateInterfaceName(rt.IfName); err != nil {\n\t\treturn nil, err\n\t}\n\n\tnewConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(\"ADD\", rt), c.exec) //执行了Plugin 注入os.Exec\n}\n\ntype RawExec struct {\n\tStderr io.Writer\n}\n\nfunc (e *RawExec) ExecPlugin(ctx context.Context, pluginPath string, stdinData []byte, environ []string) ([]byte, error) {\n\tstdout := &bytes.Buffer{}\n\tc := exec.CommandContext(ctx, pluginPath)\n\tc.Env = environ\n\tc.Stdin = bytes.NewBuffer(stdinData)\n\tc.Stdout = stdout\n\tc.Stderr = e.Stderr\n\tif err := c.Run(); err != nil {\n\t\treturn nil, pluginErr(err, stdout.Bytes())\n\t}\n\n\treturn stdout.Bytes(), nil\n}\n\nfunc pluginErr(err error, output []byte) error {\n\tif exitError, ok := err.(*exec.ExitError); ok {\n\t\temsg := types.Error{}\n\t\tif len(output) == 0 {\n\t\t\tif len(exitError.Stderr) == 0 {\n\t\t\t\temsg.Msg = \"netplugin failed with no error message\"\n\t\t\t} else {\n\t\t\t\temsg.Msg = fmt.Sprintf(\"netplugin failed: %q\", string(exitError.Stderr))\n\t\t\t}\n\t\t} else if perr := json.Unmarshal(output, &emsg); perr != nil {\n\t\t\temsg.Msg = fmt.Sprintf(\"netplugin failed but error parsing its diagnostic message %q: %v\", string(output), perr)\n\t\t}\n\t\treturn &emsg\n\t}\n\n\treturn err\n}\n\nfunc (e *RawExec) FindInPath(plugin string, paths []string) (string, error) {\n\treturn FindInPath(plugin, paths)\n}\n```\n\n将数据接入到Os kernel数据\n\n","source":"_posts/CNI.md","raw":"---\ntitle: CNI (一)\ndate: 2020-01-15 10:45:57\ntags: K8S, Container Network Interface\ndescription: Container Network Interface - networking for Linux containers\n---\n\n# CNI（第一篇）\n\n## 介绍\n\nCNI（容器网络接口）是一个规范和库，用于编写用于在Linux容器中配置网络接口的插件以及许多受支持的插件组成。\n\nCNI包括几部分： \n\n> golang SDK Lib, 用于集成实现网络通信接口；\n\n> Template，用于生成自定义的CNI插件，标准代码工程；\n\n> 标准Document，包括社区公约、描述、roadmaps、milestone等\n\n## 使用方式\n\n### cnitool 介绍\n\ncnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。\n\n```golang\nconst (\n\tEnvCNIPath        = \"CNI_PATH\"   //CNI Adapter bin文件路径（bin的编译需要去掉cgo）\n\tEnvNetDir         = \"NETCONFPATH\"  //部署（添加、删除、检查）adapter需要的json配置文件路径\n\tEnvCapabilityArgs = \"CAP_ARGS\"  // CAP 参数\n\tEnvCNIArgs        = \"CNI_ARGS\"  // adapter 外部传递的参数，一般不用，将args放在json文件中\n\tEnvCNIIfname      = \"CNI_IFNAME\"  // 设置的容器网卡名称，如eth0\n\n\tDefaultNetDir = \"/etc/cni/net.d\" // 默认CNI 插件路径\n\n\t// 以下部分是 插件 添加方式\n\tCmdAdd   = \"add\"\n\tCmdCheck = \"check\"\n\tCmdDel   = \"del\"\n)\n```\n\n### 插件使用\n\n准备二进制插件：\n```bash\ngo get github.com/containernetworking/plugins\ngo build ptp -o myptp\n```\n\n\n准备网络配置：\n```bash\necho `\n{\n\t\"cniVersion\": \"0.4.0\",\n\t\"name\": \"myptp\",\n\t\"type\": \"ptp\",  //veth pair\n\t\"ipMasq\": true,\n\t\"ipam\": {\n\t\t\"type\": \"host-local\",\n\t\t\"subnet\": \"172.16.29.0/24\",\n\t\t\"routes\": [{\n\t\t\t\"dst\": \"0.0.0.0/0\"\n\t\t}]\n\t}\n}` > /etc/cni/net.d/myptp.conflist\n```\n\n准备好配置后部署容器网络：\n\n第一步：创建网络Namespace， 添加名称为mytest_network\n```bash\nsudo ip netns add mytest_network\n```\n\n第二步：添加容器网络myptp\n```bash\nsudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network\n```\n\n第三步：调测网络\n```bash\nsudo ip -n mytest_network addr\nsudo ip netns exec mytest_network ping -c 1 4.2.2.2\n```\n\n最后，清理网络\n```bash\nsudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network\nsudo ip netns del mytest_network\n```\n\n### cnitool调用插件\n正如上面的例子：`cnitool add myptp /var/run/netns/mytest_network`\n> 参数0是cnitool工具名称\n> 参数1是操作名称（add、del、check）\n> 参数3是加载的配置对象 `myptp.*` 文件对象\n> 参数4是 net namespace 名称\n\n解析过程：\n```golang\nimport (\n\t...\n\t\"github.com/containernetworking/cni/libcni\"  // golang lib SDK\n)\n\nfunc main() {\n\tif len(os.Args) < 4 {  // 判断参数\n\t\tusage()\n\t\treturn\n\t}\n\n\tnetdir := os.Getenv(EnvNetDir)  //加载conf文件地址\n\tif netdir == \"\" {\n\t\tnetdir = DefaultNetDir\n\t}\n\tnetconf, err := libcni.LoadConfList(netdir, os.Args[2])\n\tif err != nil {\n\t\texit(err)\n\t}\n\n\t... \n\n\n\tifName, ok := os.LookupEnv(EnvCNIIfname) // 加载网卡\n\tif !ok {\n\t\tifName = \"eth0\"\n\t}\n\n\t...\n\n\tnetns := os.Args[3]    //获得 new working namespace\n\tnetns, err = filepath.Abs(netns)\n\tif err != nil {\n\t\texit(err)\n\t}\n\n\t...\n\n\t// CNI runtime object\n\tcninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), nil)\n\trt := &libcni.RuntimeConf{\n\t\tContainerID:    fmt.Sprintf(\"cnitool-%x\", ha512.Sum512([]byte(netns))[:10]),\n\t\tNetNS:          netns,\n\t\tIfName:         ifName,\n\t\tArgs:           cniArgs,\n\t\tCapabilityArgs: capabilityArgs,\n\t}\n\n\t...\n\n\t// CNI 具体执行方式\n\tswitch os.Args[1] {\n\tcase CmdAdd:\n\t\tresult, err := cninet.AddNetworkList(context.TODO(), netconf, rt)\n\t\tif result != nil {\n\t\t\t_ = result.Print()\n\t\t}\n\t\texit(err)\n\tcase CmdCheck:\n\t\terr := cninet.CheckNetworkList(context.TODO(), netconf, rt)\n\t\texit(err)\n\tcase CmdDel:\n\t\texit(cninet.DelNetworkList(context.TODO(), netconf, rt))\n\t}\n}\n\n```\n\n## Golang libcni SDK\nSDK核心的interface 接口定义：\n```golang\nimport(\n\t\"github.com/containernetworking/cni/pkg/invoke\" //syscall 具体调用\n\t\"github.com/containernetworking/cni/pkg/types\" // 网络adapter管理，使用Plugin Chains模型进行关联\n\t\"github.com/containernetworking/cni/pkg/utils\" // 公共方法：cni conf file中各个字段ValidCheck\n\t\"github.com/containernetworking/cni/pkg/version\" // version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容\n)\ntype CNI interface {\n\tAddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)\n\tCheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error\n\tDelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error\n\tGetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)\n\tGetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]byte, *RuntimeConf, error)\n\n\t//以下3个最核心接口\n\tAddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)\n\tCheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error\n\tDelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error\n\n\tGetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)\n\tGetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]byte, *RuntimeConf, error)\n\n\tValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]string, error)\n\tValidateNetwork(ctx context.Context, net *NetworkConfig) ([]string, error)\n}\n\ntype CNIConfig struct {\n\tPath     []string\n\texec     invoke.Exec\n\tcacheDir string\n}\n\nvar _ CNI = &CNIConfig{} // *注意，将CNIConfig{}对象指针都是CNI接口的实现实例；\n```\n\n### 核心接口分析\n```golang\nfunc (c *CNIConfig) addNetwork(ctx context.Context, name, cniVersion string, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf) (types.Result, error) {\n\tc.ensureExec()  // 添加数据平台\n\tpluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateContainerID(rt.ContainerID); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateNetworkName(name); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateInterfaceName(rt.IfName); err != nil {\n\t\treturn nil, err\n\t}\n\n\tnewConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(\"ADD\", rt), c.exec) //执行了Plugin 注入os.Exec\n}\n\ntype RawExec struct {\n\tStderr io.Writer\n}\n\nfunc (e *RawExec) ExecPlugin(ctx context.Context, pluginPath string, stdinData []byte, environ []string) ([]byte, error) {\n\tstdout := &bytes.Buffer{}\n\tc := exec.CommandContext(ctx, pluginPath)\n\tc.Env = environ\n\tc.Stdin = bytes.NewBuffer(stdinData)\n\tc.Stdout = stdout\n\tc.Stderr = e.Stderr\n\tif err := c.Run(); err != nil {\n\t\treturn nil, pluginErr(err, stdout.Bytes())\n\t}\n\n\treturn stdout.Bytes(), nil\n}\n\nfunc pluginErr(err error, output []byte) error {\n\tif exitError, ok := err.(*exec.ExitError); ok {\n\t\temsg := types.Error{}\n\t\tif len(output) == 0 {\n\t\t\tif len(exitError.Stderr) == 0 {\n\t\t\t\temsg.Msg = \"netplugin failed with no error message\"\n\t\t\t} else {\n\t\t\t\temsg.Msg = fmt.Sprintf(\"netplugin failed: %q\", string(exitError.Stderr))\n\t\t\t}\n\t\t} else if perr := json.Unmarshal(output, &emsg); perr != nil {\n\t\t\temsg.Msg = fmt.Sprintf(\"netplugin failed but error parsing its diagnostic message %q: %v\", string(output), perr)\n\t\t}\n\t\treturn &emsg\n\t}\n\n\treturn err\n}\n\nfunc (e *RawExec) FindInPath(plugin string, paths []string) (string, error) {\n\treturn FindInPath(plugin, paths)\n}\n```\n\n将数据接入到Os kernel数据\n\n","slug":"CNI","published":1,"updated":"2020-01-19T07:01:23.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5lyqwvc00010d5pbwmgh6r9","content":"<h1 id=\"CNI（第一篇）\"><a href=\"#CNI（第一篇）\" class=\"headerlink\" title=\"CNI（第一篇）\"></a>CNI（第一篇）</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>CNI（容器网络接口）是一个规范和库，用于编写用于在Linux容器中配置网络接口的插件以及许多受支持的插件组成。</p>\n<p>CNI包括几部分： </p>\n<blockquote>\n<p>golang SDK Lib, 用于集成实现网络通信接口；</p>\n</blockquote>\n<blockquote>\n<p>Template，用于生成自定义的CNI插件，标准代码工程；</p>\n</blockquote>\n<blockquote>\n<p>标准Document，包括社区公约、描述、roadmaps、milestone等</p>\n</blockquote>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h3 id=\"cnitool-介绍\"><a href=\"#cnitool-介绍\" class=\"headerlink\" title=\"cnitool 介绍\"></a>cnitool 介绍</h3><p>cnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tEnvCNIPath        = <span class=\"string\">\"CNI_PATH\"</span>   <span class=\"comment\">//CNI Adapter bin文件路径（bin的编译需要去掉cgo）</span></span><br><span class=\"line\">\tEnvNetDir         = <span class=\"string\">\"NETCONFPATH\"</span>  <span class=\"comment\">//部署（添加、删除、检查）adapter需要的json配置文件路径</span></span><br><span class=\"line\">\tEnvCapabilityArgs = <span class=\"string\">\"CAP_ARGS\"</span>  <span class=\"comment\">// CAP 参数</span></span><br><span class=\"line\">\tEnvCNIArgs        = <span class=\"string\">\"CNI_ARGS\"</span>  <span class=\"comment\">// adapter 外部传递的参数，一般不用，将args放在json文件中</span></span><br><span class=\"line\">\tEnvCNIIfname      = <span class=\"string\">\"CNI_IFNAME\"</span>  <span class=\"comment\">// 设置的容器网卡名称，如eth0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tDefaultNetDir = <span class=\"string\">\"/etc/cni/net.d\"</span> <span class=\"comment\">// 默认CNI 插件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 以下部分是 插件 添加方式</span></span><br><span class=\"line\">\tCmdAdd   = <span class=\"string\">\"add\"</span></span><br><span class=\"line\">\tCmdCheck = <span class=\"string\">\"check\"</span></span><br><span class=\"line\">\tCmdDel   = <span class=\"string\">\"del\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h3><p>准备二进制插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/containernetworking/plugins</span><br><span class=\"line\">go build ptp -o myptp</span><br></pre></td></tr></table></figure>\n\n\n<p>准备网络配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> `</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"cniVersion\"</span>: <span class=\"string\">\"0.4.0\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span>: <span class=\"string\">\"myptp\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"ptp\"</span>,  //veth pair</span><br><span class=\"line\">\t<span class=\"string\">\"ipMasq\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"ipam\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"host-local\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"subnet\"</span>: <span class=\"string\">\"172.16.29.0/24\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"routes\"</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"dst\"</span>: <span class=\"string\">\"0.0.0.0/0\"</span></span><br><span class=\"line\">\t\t&#125;]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;` &gt; /etc/cni/net.d/myptp.conflist</span><br></pre></td></tr></table></figure>\n\n<p>准备好配置后部署容器网络：</p>\n<p>第一步：创建网络Namespace， 添加名称为mytest_network</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns add mytest_network</span><br></pre></td></tr></table></figure>\n\n<p>第二步：添加容器网络myptp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network</span><br></pre></td></tr></table></figure>\n\n<p>第三步：调测网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip -n mytest_network addr</span><br><span class=\"line\">sudo ip netns <span class=\"built_in\">exec</span> mytest_network ping -c 1 4.2.2.2</span><br></pre></td></tr></table></figure>\n\n<p>最后，清理网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network</span><br><span class=\"line\">sudo ip netns del mytest_network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cnitool调用插件\"><a href=\"#cnitool调用插件\" class=\"headerlink\" title=\"cnitool调用插件\"></a>cnitool调用插件</h3><p>正如上面的例子：<code>cnitool add myptp /var/run/netns/mytest_network</code></p>\n<blockquote>\n<p>参数0是cnitool工具名称<br>参数1是操作名称（add、del、check）<br>参数3是加载的配置对象 <code>myptp.*</code> 文件对象<br>参数4是 net namespace 名称</p>\n</blockquote>\n<p>解析过程：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/libcni\"</span>  <span class=\"comment\">// golang lib SDK</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &lt; <span class=\"number\">4</span> &#123;  <span class=\"comment\">// 判断参数</span></span><br><span class=\"line\">\t\tusage()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetdir := os.Getenv(EnvNetDir)  <span class=\"comment\">//加载conf文件地址</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> netdir == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\tnetdir = DefaultNetDir</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnetconf, err := libcni.LoadConfList(netdir, os.Args[<span class=\"number\">2</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t... </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tifName, ok := os.LookupEnv(EnvCNIIfname) <span class=\"comment\">// 加载网卡</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tifName = <span class=\"string\">\"eth0\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetns := os.Args[<span class=\"number\">3</span>]    <span class=\"comment\">//获得 new working namespace</span></span><br><span class=\"line\">\tnetns, err = filepath.Abs(netns)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// CNI runtime object</span></span><br><span class=\"line\">\tcninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\trt := &amp;libcni.RuntimeConf&#123;</span><br><span class=\"line\">\t\tContainerID:    fmt.Sprintf(<span class=\"string\">\"cnitool-%x\"</span>, ha512.Sum512([]<span class=\"keyword\">byte</span>(netns))[:<span class=\"number\">10</span>]),</span><br><span class=\"line\">\t\tNetNS:          netns,</span><br><span class=\"line\">\t\tIfName:         ifName,</span><br><span class=\"line\">\t\tArgs:           cniArgs,</span><br><span class=\"line\">\t\tCapabilityArgs: capabilityArgs,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// CNI 具体执行方式</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> os.Args[<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdAdd:</span><br><span class=\"line\">\t\tresult, err := cninet.AddNetworkList(context.TODO(), netconf, rt)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> result != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t_ = result.Print()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdCheck:</span><br><span class=\"line\">\t\terr := cninet.CheckNetworkList(context.TODO(), netconf, rt)</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdDel:</span><br><span class=\"line\">\t\texit(cninet.DelNetworkList(context.TODO(), netconf, rt))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Golang-libcni-SDK\"><a href=\"#Golang-libcni-SDK\" class=\"headerlink\" title=\"Golang libcni SDK\"></a>Golang libcni SDK</h2><p>SDK核心的interface 接口定义：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/invoke\"</span> <span class=\"comment\">//syscall 具体调用</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/types\"</span> <span class=\"comment\">// 网络adapter管理，使用Plugin Chains模型进行关联</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/utils\"</span> <span class=\"comment\">// 公共方法：cni conf file中各个字段ValidCheck</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/version\"</span> <span class=\"comment\">// version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> CNI <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tCheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class=\"line\">\tDelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class=\"line\">\tGetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tGetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]<span class=\"keyword\">byte</span>, *RuntimeConf, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//以下3个最核心接口</span></span><br><span class=\"line\">\tAddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tCheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class=\"line\">\tDelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class=\"line\"></span><br><span class=\"line\">\tGetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tGetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]<span class=\"keyword\">byte</span>, *RuntimeConf, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\tValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">\tValidateNetwork(ctx context.Context, net *NetworkConfig) ([]<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CNIConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPath     []<span class=\"keyword\">string</span></span><br><span class=\"line\">\texec     invoke.Exec</span><br><span class=\"line\">\tcacheDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ CNI = &amp;CNIConfig&#123;&#125; <span class=\"comment\">// *注意，将CNIConfig&#123;&#125;对象指针都是CNI接口的实现实例；</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心接口分析\"><a href=\"#核心接口分析\" class=\"headerlink\" title=\"核心接口分析\"></a>核心接口分析</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *CNIConfig)</span> <span class=\"title\">addNetwork</span><span class=\"params\">(ctx context.Context, name, cniVersion <span class=\"keyword\">string</span>, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf)</span> <span class=\"params\">(types.Result, error)</span></span> &#123;</span><br><span class=\"line\">\tc.ensureExec()  <span class=\"comment\">// 添加数据平台</span></span><br><span class=\"line\">\tpluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateContainerID(rt.ContainerID); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateNetworkName(name); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateInterfaceName(rt.IfName); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(<span class=\"string\">\"ADD\"</span>, rt), c.exec) <span class=\"comment\">//执行了Plugin 注入os.Exec</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RawExec <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tStderr io.Writer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *RawExec)</span> <span class=\"title\">ExecPlugin</span><span class=\"params\">(ctx context.Context, pluginPath <span class=\"keyword\">string</span>, stdinData []<span class=\"keyword\">byte</span>, environ []<span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tstdout := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">\tc := exec.CommandContext(ctx, pluginPath)</span><br><span class=\"line\">\tc.Env = environ</span><br><span class=\"line\">\tc.Stdin = bytes.NewBuffer(stdinData)</span><br><span class=\"line\">\tc.Stdout = stdout</span><br><span class=\"line\">\tc.Stderr = e.Stderr</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.Run(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, pluginErr(err, stdout.Bytes())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stdout.Bytes(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pluginErr</span><span class=\"params\">(err error, output []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exitError, ok := err.(*exec.ExitError); ok &#123;</span><br><span class=\"line\">\t\temsg := types.Error&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(output) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(exitError.Stderr) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\temsg.Msg = <span class=\"string\">\"netplugin failed with no error message\"</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\temsg.Msg = fmt.Sprintf(<span class=\"string\">\"netplugin failed: %q\"</span>, <span class=\"keyword\">string</span>(exitError.Stderr))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> perr := json.Unmarshal(output, &amp;emsg); perr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\temsg.Msg = fmt.Sprintf(<span class=\"string\">\"netplugin failed but error parsing its diagnostic message %q: %v\"</span>, <span class=\"keyword\">string</span>(output), perr)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;emsg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *RawExec)</span> <span class=\"title\">FindInPath</span><span class=\"params\">(plugin <span class=\"keyword\">string</span>, paths []<span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FindInPath(plugin, paths)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将数据接入到Os kernel数据</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CNI（第一篇）\"><a href=\"#CNI（第一篇）\" class=\"headerlink\" title=\"CNI（第一篇）\"></a>CNI（第一篇）</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>CNI（容器网络接口）是一个规范和库，用于编写用于在Linux容器中配置网络接口的插件以及许多受支持的插件组成。</p>\n<p>CNI包括几部分： </p>\n<blockquote>\n<p>golang SDK Lib, 用于集成实现网络通信接口；</p>\n</blockquote>\n<blockquote>\n<p>Template，用于生成自定义的CNI插件，标准代码工程；</p>\n</blockquote>\n<blockquote>\n<p>标准Document，包括社区公约、描述、roadmaps、milestone等</p>\n</blockquote>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h3 id=\"cnitool-介绍\"><a href=\"#cnitool-介绍\" class=\"headerlink\" title=\"cnitool 介绍\"></a>cnitool 介绍</h3><p>cnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tEnvCNIPath        = <span class=\"string\">\"CNI_PATH\"</span>   <span class=\"comment\">//CNI Adapter bin文件路径（bin的编译需要去掉cgo）</span></span><br><span class=\"line\">\tEnvNetDir         = <span class=\"string\">\"NETCONFPATH\"</span>  <span class=\"comment\">//部署（添加、删除、检查）adapter需要的json配置文件路径</span></span><br><span class=\"line\">\tEnvCapabilityArgs = <span class=\"string\">\"CAP_ARGS\"</span>  <span class=\"comment\">// CAP 参数</span></span><br><span class=\"line\">\tEnvCNIArgs        = <span class=\"string\">\"CNI_ARGS\"</span>  <span class=\"comment\">// adapter 外部传递的参数，一般不用，将args放在json文件中</span></span><br><span class=\"line\">\tEnvCNIIfname      = <span class=\"string\">\"CNI_IFNAME\"</span>  <span class=\"comment\">// 设置的容器网卡名称，如eth0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tDefaultNetDir = <span class=\"string\">\"/etc/cni/net.d\"</span> <span class=\"comment\">// 默认CNI 插件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 以下部分是 插件 添加方式</span></span><br><span class=\"line\">\tCmdAdd   = <span class=\"string\">\"add\"</span></span><br><span class=\"line\">\tCmdCheck = <span class=\"string\">\"check\"</span></span><br><span class=\"line\">\tCmdDel   = <span class=\"string\">\"del\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h3><p>准备二进制插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/containernetworking/plugins</span><br><span class=\"line\">go build ptp -o myptp</span><br></pre></td></tr></table></figure>\n\n\n<p>准备网络配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> `</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"cniVersion\"</span>: <span class=\"string\">\"0.4.0\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span>: <span class=\"string\">\"myptp\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"ptp\"</span>,  //veth pair</span><br><span class=\"line\">\t<span class=\"string\">\"ipMasq\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"ipam\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"host-local\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"subnet\"</span>: <span class=\"string\">\"172.16.29.0/24\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"routes\"</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"dst\"</span>: <span class=\"string\">\"0.0.0.0/0\"</span></span><br><span class=\"line\">\t\t&#125;]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;` &gt; /etc/cni/net.d/myptp.conflist</span><br></pre></td></tr></table></figure>\n\n<p>准备好配置后部署容器网络：</p>\n<p>第一步：创建网络Namespace， 添加名称为mytest_network</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns add mytest_network</span><br></pre></td></tr></table></figure>\n\n<p>第二步：添加容器网络myptp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network</span><br></pre></td></tr></table></figure>\n\n<p>第三步：调测网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip -n mytest_network addr</span><br><span class=\"line\">sudo ip netns <span class=\"built_in\">exec</span> mytest_network ping -c 1 4.2.2.2</span><br></pre></td></tr></table></figure>\n\n<p>最后，清理网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network</span><br><span class=\"line\">sudo ip netns del mytest_network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cnitool调用插件\"><a href=\"#cnitool调用插件\" class=\"headerlink\" title=\"cnitool调用插件\"></a>cnitool调用插件</h3><p>正如上面的例子：<code>cnitool add myptp /var/run/netns/mytest_network</code></p>\n<blockquote>\n<p>参数0是cnitool工具名称<br>参数1是操作名称（add、del、check）<br>参数3是加载的配置对象 <code>myptp.*</code> 文件对象<br>参数4是 net namespace 名称</p>\n</blockquote>\n<p>解析过程：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/libcni\"</span>  <span class=\"comment\">// golang lib SDK</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &lt; <span class=\"number\">4</span> &#123;  <span class=\"comment\">// 判断参数</span></span><br><span class=\"line\">\t\tusage()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetdir := os.Getenv(EnvNetDir)  <span class=\"comment\">//加载conf文件地址</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> netdir == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\tnetdir = DefaultNetDir</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnetconf, err := libcni.LoadConfList(netdir, os.Args[<span class=\"number\">2</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t... </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tifName, ok := os.LookupEnv(EnvCNIIfname) <span class=\"comment\">// 加载网卡</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tifName = <span class=\"string\">\"eth0\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetns := os.Args[<span class=\"number\">3</span>]    <span class=\"comment\">//获得 new working namespace</span></span><br><span class=\"line\">\tnetns, err = filepath.Abs(netns)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// CNI runtime object</span></span><br><span class=\"line\">\tcninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\trt := &amp;libcni.RuntimeConf&#123;</span><br><span class=\"line\">\t\tContainerID:    fmt.Sprintf(<span class=\"string\">\"cnitool-%x\"</span>, ha512.Sum512([]<span class=\"keyword\">byte</span>(netns))[:<span class=\"number\">10</span>]),</span><br><span class=\"line\">\t\tNetNS:          netns,</span><br><span class=\"line\">\t\tIfName:         ifName,</span><br><span class=\"line\">\t\tArgs:           cniArgs,</span><br><span class=\"line\">\t\tCapabilityArgs: capabilityArgs,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// CNI 具体执行方式</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> os.Args[<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdAdd:</span><br><span class=\"line\">\t\tresult, err := cninet.AddNetworkList(context.TODO(), netconf, rt)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> result != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t_ = result.Print()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdCheck:</span><br><span class=\"line\">\t\terr := cninet.CheckNetworkList(context.TODO(), netconf, rt)</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdDel:</span><br><span class=\"line\">\t\texit(cninet.DelNetworkList(context.TODO(), netconf, rt))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Golang-libcni-SDK\"><a href=\"#Golang-libcni-SDK\" class=\"headerlink\" title=\"Golang libcni SDK\"></a>Golang libcni SDK</h2><p>SDK核心的interface 接口定义：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/invoke\"</span> <span class=\"comment\">//syscall 具体调用</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/types\"</span> <span class=\"comment\">// 网络adapter管理，使用Plugin Chains模型进行关联</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/utils\"</span> <span class=\"comment\">// 公共方法：cni conf file中各个字段ValidCheck</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/version\"</span> <span class=\"comment\">// version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> CNI <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tCheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class=\"line\">\tDelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class=\"line\">\tGetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tGetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]<span class=\"keyword\">byte</span>, *RuntimeConf, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//以下3个最核心接口</span></span><br><span class=\"line\">\tAddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tCheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class=\"line\">\tDelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class=\"line\"></span><br><span class=\"line\">\tGetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tGetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]<span class=\"keyword\">byte</span>, *RuntimeConf, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\tValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">\tValidateNetwork(ctx context.Context, net *NetworkConfig) ([]<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CNIConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPath     []<span class=\"keyword\">string</span></span><br><span class=\"line\">\texec     invoke.Exec</span><br><span class=\"line\">\tcacheDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ CNI = &amp;CNIConfig&#123;&#125; <span class=\"comment\">// *注意，将CNIConfig&#123;&#125;对象指针都是CNI接口的实现实例；</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心接口分析\"><a href=\"#核心接口分析\" class=\"headerlink\" title=\"核心接口分析\"></a>核心接口分析</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *CNIConfig)</span> <span class=\"title\">addNetwork</span><span class=\"params\">(ctx context.Context, name, cniVersion <span class=\"keyword\">string</span>, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf)</span> <span class=\"params\">(types.Result, error)</span></span> &#123;</span><br><span class=\"line\">\tc.ensureExec()  <span class=\"comment\">// 添加数据平台</span></span><br><span class=\"line\">\tpluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateContainerID(rt.ContainerID); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateNetworkName(name); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateInterfaceName(rt.IfName); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(<span class=\"string\">\"ADD\"</span>, rt), c.exec) <span class=\"comment\">//执行了Plugin 注入os.Exec</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RawExec <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tStderr io.Writer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *RawExec)</span> <span class=\"title\">ExecPlugin</span><span class=\"params\">(ctx context.Context, pluginPath <span class=\"keyword\">string</span>, stdinData []<span class=\"keyword\">byte</span>, environ []<span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tstdout := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">\tc := exec.CommandContext(ctx, pluginPath)</span><br><span class=\"line\">\tc.Env = environ</span><br><span class=\"line\">\tc.Stdin = bytes.NewBuffer(stdinData)</span><br><span class=\"line\">\tc.Stdout = stdout</span><br><span class=\"line\">\tc.Stderr = e.Stderr</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.Run(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, pluginErr(err, stdout.Bytes())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stdout.Bytes(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pluginErr</span><span class=\"params\">(err error, output []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exitError, ok := err.(*exec.ExitError); ok &#123;</span><br><span class=\"line\">\t\temsg := types.Error&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(output) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(exitError.Stderr) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\temsg.Msg = <span class=\"string\">\"netplugin failed with no error message\"</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\temsg.Msg = fmt.Sprintf(<span class=\"string\">\"netplugin failed: %q\"</span>, <span class=\"keyword\">string</span>(exitError.Stderr))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> perr := json.Unmarshal(output, &amp;emsg); perr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\temsg.Msg = fmt.Sprintf(<span class=\"string\">\"netplugin failed but error parsing its diagnostic message %q: %v\"</span>, <span class=\"keyword\">string</span>(output), perr)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;emsg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *RawExec)</span> <span class=\"title\">FindInPath</span><span class=\"params\">(plugin <span class=\"keyword\">string</span>, paths []<span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FindInPath(plugin, paths)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将数据接入到Os kernel数据</p>\n"},{"title":"Blog背景介绍","date":"2020-01-14T02:00:18.000Z","description":"背景介绍； 分享最近几年的工作经验和心得；","_content":"\n# Blog\n\n由于之前单独保密协议 和 公司网络问题，禁止分析工作经验到外网（获得内部审批的Qcon 和 kubeCon除外），真处于换工作的间隙，我这几年的工作上、生活上的东西积累下来，怕自己年纪大了，忘性越来越大！ 哈哈！\n\n## 背景介绍\n本Blog先介绍K8s相关组件、包括：K8s master各个组件、CNI、CSI、CRI等；再介绍Docker engine，包括底层的runc和runv等\n\n再介绍上层应用： service mesh和knaitve 以及 serverless 社区发展；\n\n再穿插着来介绍Cloud Native的 Monitor、Tracing、Logging 和 Chaos Engines；\n\n\n## 工作经历\n\n2010.10 - 2013.7 在百度大搜，主要从事开发测试和全栈研发工作。参与过百度乔梁总Smart CI/CD、百度360搜索大战、架构改造（组件化改造）BASA项目、以及百度大搜产品变化比较大的阿拉丁项目（百度侧边栏阿拉丁效果）\n\n\n2013.8 - 2015.9 在阿里妈妈，主要从事基础研发，部署平台、内部应用市场、ODPS PHP Client、搜索引擎（btree+ 和 jstorm数据写入）； 也包括DSP业务功能研发； 阿里妈妈虽然是阿里奶牛，但是技术上还是比较基础的；和淘宝、搜索等技术能力还比不上。\n\n2015.9 - 2017.8 在滴滴，主要是从事工具平台： 主要包括：调查问卷系统、Crash&ANR系统、网络数据收集监控、IOS sdk等等\n\n2017.8 - 2020.1 在华为云，主要从事云服务的研发（CDN、RTC、媒体云服务），基础PaaS服务、Service mesh（istio、envoy、sofamosn等）、KNative等，已经CNCF组件； 参与开源社区；\n\n## 工作体验\n\n我最感谢的是百度。在百度是一个最适合培养新人地方，从个人能力提升，对于中大型公司执行流程和管理流程。本身百度业务比较简单（业务简单，不是技术简单），可以更好的端到端了解正研发管理流程；\n\n在阿里，是最考虑合作共赢的产品，只要你刚兴趣可以接触到各种产品、技术。可以从产品角度，来思考技术；\n\n在滴滴，滴滴本身不是技术公司，是产品需求产生的公司，业务快速膨胀，推进技术的快速革新。我在其中体验到了端测技术（iOS相关）；\n\n在华为云，体验到了管理的『艺术』，人性的底线；\n\n## 关于我\n\n喜欢coding； 不擅长ppt； 喜欢： 代码架构 > 功能架构 > 远景视图；","source":"_posts/common.md","raw":"---\ntitle: Blog背景介绍\ndate: 2020-01-14 10:00:18\ntags: \ndescription: 背景介绍； 分享最近几年的工作经验和心得；\n---\n\n# Blog\n\n由于之前单独保密协议 和 公司网络问题，禁止分析工作经验到外网（获得内部审批的Qcon 和 kubeCon除外），真处于换工作的间隙，我这几年的工作上、生活上的东西积累下来，怕自己年纪大了，忘性越来越大！ 哈哈！\n\n## 背景介绍\n本Blog先介绍K8s相关组件、包括：K8s master各个组件、CNI、CSI、CRI等；再介绍Docker engine，包括底层的runc和runv等\n\n再介绍上层应用： service mesh和knaitve 以及 serverless 社区发展；\n\n再穿插着来介绍Cloud Native的 Monitor、Tracing、Logging 和 Chaos Engines；\n\n\n## 工作经历\n\n2010.10 - 2013.7 在百度大搜，主要从事开发测试和全栈研发工作。参与过百度乔梁总Smart CI/CD、百度360搜索大战、架构改造（组件化改造）BASA项目、以及百度大搜产品变化比较大的阿拉丁项目（百度侧边栏阿拉丁效果）\n\n\n2013.8 - 2015.9 在阿里妈妈，主要从事基础研发，部署平台、内部应用市场、ODPS PHP Client、搜索引擎（btree+ 和 jstorm数据写入）； 也包括DSP业务功能研发； 阿里妈妈虽然是阿里奶牛，但是技术上还是比较基础的；和淘宝、搜索等技术能力还比不上。\n\n2015.9 - 2017.8 在滴滴，主要是从事工具平台： 主要包括：调查问卷系统、Crash&ANR系统、网络数据收集监控、IOS sdk等等\n\n2017.8 - 2020.1 在华为云，主要从事云服务的研发（CDN、RTC、媒体云服务），基础PaaS服务、Service mesh（istio、envoy、sofamosn等）、KNative等，已经CNCF组件； 参与开源社区；\n\n## 工作体验\n\n我最感谢的是百度。在百度是一个最适合培养新人地方，从个人能力提升，对于中大型公司执行流程和管理流程。本身百度业务比较简单（业务简单，不是技术简单），可以更好的端到端了解正研发管理流程；\n\n在阿里，是最考虑合作共赢的产品，只要你刚兴趣可以接触到各种产品、技术。可以从产品角度，来思考技术；\n\n在滴滴，滴滴本身不是技术公司，是产品需求产生的公司，业务快速膨胀，推进技术的快速革新。我在其中体验到了端测技术（iOS相关）；\n\n在华为云，体验到了管理的『艺术』，人性的底线；\n\n## 关于我\n\n喜欢coding； 不擅长ppt； 喜欢： 代码架构 > 功能架构 > 远景视图；","slug":"common","published":1,"updated":"2020-01-20T04:42:03.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5lyqwvl00030d5pgand7mt5","content":"<h1 id=\"Blog\"><a href=\"#Blog\" class=\"headerlink\" title=\"Blog\"></a>Blog</h1><p>由于之前单独保密协议 和 公司网络问题，禁止分析工作经验到外网（获得内部审批的Qcon 和 kubeCon除外），真处于换工作的间隙，我这几年的工作上、生活上的东西积累下来，怕自己年纪大了，忘性越来越大！ 哈哈！</p>\n<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>本Blog先介绍K8s相关组件、包括：K8s master各个组件、CNI、CSI、CRI等；再介绍Docker engine，包括底层的runc和runv等</p>\n<p>再介绍上层应用： service mesh和knaitve 以及 serverless 社区发展；</p>\n<p>再穿插着来介绍Cloud Native的 Monitor、Tracing、Logging 和 Chaos Engines；</p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><p>2010.10 - 2013.7 在百度大搜，主要从事开发测试和全栈研发工作。参与过百度乔梁总Smart CI/CD、百度360搜索大战、架构改造（组件化改造）BASA项目、以及百度大搜产品变化比较大的阿拉丁项目（百度侧边栏阿拉丁效果）</p>\n<p>2013.8 - 2015.9 在阿里妈妈，主要从事基础研发，部署平台、内部应用市场、ODPS PHP Client、搜索引擎（btree+ 和 jstorm数据写入）； 也包括DSP业务功能研发； 阿里妈妈虽然是阿里奶牛，但是技术上还是比较基础的；和淘宝、搜索等技术能力还比不上。</p>\n<p>2015.9 - 2017.8 在滴滴，主要是从事工具平台： 主要包括：调查问卷系统、Crash&amp;ANR系统、网络数据收集监控、IOS sdk等等</p>\n<p>2017.8 - 2020.1 在华为云，主要从事云服务的研发（CDN、RTC、媒体云服务），基础PaaS服务、Service mesh（istio、envoy、sofamosn等）、KNative等，已经CNCF组件； 参与开源社区；</p>\n<h2 id=\"工作体验\"><a href=\"#工作体验\" class=\"headerlink\" title=\"工作体验\"></a>工作体验</h2><p>我最感谢的是百度。在百度是一个最适合培养新人地方，从个人能力提升，对于中大型公司执行流程和管理流程。本身百度业务比较简单（业务简单，不是技术简单），可以更好的端到端了解正研发管理流程；</p>\n<p>在阿里，是最考虑合作共赢的产品，只要你刚兴趣可以接触到各种产品、技术。可以从产品角度，来思考技术；</p>\n<p>在滴滴，滴滴本身不是技术公司，是产品需求产生的公司，业务快速膨胀，推进技术的快速革新。我在其中体验到了端测技术（iOS相关）；</p>\n<p>在华为云，体验到了管理的『艺术』，人性的底线；</p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>喜欢coding； 不擅长ppt； 喜欢： 代码架构 &gt; 功能架构 &gt; 远景视图；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Blog\"><a href=\"#Blog\" class=\"headerlink\" title=\"Blog\"></a>Blog</h1><p>由于之前单独保密协议 和 公司网络问题，禁止分析工作经验到外网（获得内部审批的Qcon 和 kubeCon除外），真处于换工作的间隙，我这几年的工作上、生活上的东西积累下来，怕自己年纪大了，忘性越来越大！ 哈哈！</p>\n<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>本Blog先介绍K8s相关组件、包括：K8s master各个组件、CNI、CSI、CRI等；再介绍Docker engine，包括底层的runc和runv等</p>\n<p>再介绍上层应用： service mesh和knaitve 以及 serverless 社区发展；</p>\n<p>再穿插着来介绍Cloud Native的 Monitor、Tracing、Logging 和 Chaos Engines；</p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><p>2010.10 - 2013.7 在百度大搜，主要从事开发测试和全栈研发工作。参与过百度乔梁总Smart CI/CD、百度360搜索大战、架构改造（组件化改造）BASA项目、以及百度大搜产品变化比较大的阿拉丁项目（百度侧边栏阿拉丁效果）</p>\n<p>2013.8 - 2015.9 在阿里妈妈，主要从事基础研发，部署平台、内部应用市场、ODPS PHP Client、搜索引擎（btree+ 和 jstorm数据写入）； 也包括DSP业务功能研发； 阿里妈妈虽然是阿里奶牛，但是技术上还是比较基础的；和淘宝、搜索等技术能力还比不上。</p>\n<p>2015.9 - 2017.8 在滴滴，主要是从事工具平台： 主要包括：调查问卷系统、Crash&amp;ANR系统、网络数据收集监控、IOS sdk等等</p>\n<p>2017.8 - 2020.1 在华为云，主要从事云服务的研发（CDN、RTC、媒体云服务），基础PaaS服务、Service mesh（istio、envoy、sofamosn等）、KNative等，已经CNCF组件； 参与开源社区；</p>\n<h2 id=\"工作体验\"><a href=\"#工作体验\" class=\"headerlink\" title=\"工作体验\"></a>工作体验</h2><p>我最感谢的是百度。在百度是一个最适合培养新人地方，从个人能力提升，对于中大型公司执行流程和管理流程。本身百度业务比较简单（业务简单，不是技术简单），可以更好的端到端了解正研发管理流程；</p>\n<p>在阿里，是最考虑合作共赢的产品，只要你刚兴趣可以接触到各种产品、技术。可以从产品角度，来思考技术；</p>\n<p>在滴滴，滴滴本身不是技术公司，是产品需求产生的公司，业务快速膨胀，推进技术的快速革新。我在其中体验到了端测技术（iOS相关）；</p>\n<p>在华为云，体验到了管理的『艺术』，人性的底线；</p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>喜欢coding； 不擅长ppt； 喜欢： 代码架构 &gt; 功能架构 &gt; 远景视图；</p>\n"},{"title":"CNI (二)","date":"2020-01-19T06:59:21.000Z","description":"目前K8s中使用比较多的CNI Plugin插件；简单介绍；","_content":"\n# CNI（第二篇）\n\n## 介绍\n\nCNI（容器网络接口）是一个规范SPEC。 如何配置调用： 请查看[CNI SPEC](https://github.com/containernetworking/cni/blob/master/SPEC.md)\n\nCNI包括几部分： \n\n> golang SDK Lib, 用于集成实现网络通信接口；\n\n> Template，用于生成自定义的CNI插件，标准代码工程；\n\n> 标准Document，包括社区公约、描述、roadmaps、milestone等\n\n## 使用方式\n\n### cnitool 介绍\n\ncnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。\n\n```golang\nconst (\n\tEnvCNIPath        = \"CNI_PATH\"   //CNI Adapter bin文件路径（bin的编译需要去掉cgo）\n\tEnvNetDir         = \"NETCONFPATH\"  //部署（添加、删除、检查）adapter需要的json配置文件路径\n\tEnvCapabilityArgs = \"CAP_ARGS\"  // CAP 参数\n\tEnvCNIArgs        = \"CNI_ARGS\"  // adapter 外部传递的参数，一般不用，将args放在json文件中\n\tEnvCNIIfname      = \"CNI_IFNAME\"  // 设置的容器网卡名称，如eth0\n\n\tDefaultNetDir = \"/etc/cni/net.d\" // 默认CNI 插件路径\n\n\t// 以下部分是 插件 添加方式\n\tCmdAdd   = \"add\"\n\tCmdCheck = \"check\"\n\tCmdDel   = \"del\"\n)\n```\n\n### 插件使用\n\n准备二进制插件：\n```bash\ngo get github.com/containernetworking/plugins\ngo build ptp -o myptp\n```\n\n\n准备网络配置：\n```bash\necho `\n{\n\t\"cniVersion\": \"0.4.0\",\n\t\"name\": \"myptp\",\n\t\"type\": \"ptp\",  //veth pair\n\t\"ipMasq\": true,\n\t\"ipam\": {\n\t\t\"type\": \"host-local\",\n\t\t\"subnet\": \"172.16.29.0/24\",\n\t\t\"routes\": [{\n\t\t\t\"dst\": \"0.0.0.0/0\"\n\t\t}]\n\t}\n}` > /etc/cni/net.d/myptp.conflist\n```\n\n准备好配置后部署容器网络：\n\n第一步：创建网络Namespace， 添加名称为mytest_network\n```bash\nsudo ip netns add mytest_network\n```\n\n第二步：添加容器网络myptp\n```bash\nsudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network\n```\n\n第三步：调测网络\n```bash\nsudo ip -n mytest_network addr\nsudo ip netns exec mytest_network ping -c 1 4.2.2.2\n```\n\n最后，清理网络\n```bash\nsudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network\nsudo ip netns del mytest_network\n```\n\n### cnitool调用插件\n正如上面的例子：`cnitool add myptp /var/run/netns/mytest_network`\n> 参数0是cnitool工具名称\n> 参数1是操作名称（add、del、check）\n> 参数3是加载的配置对象 `myptp.*` 文件对象\n> 参数4是 net namespace 名称\n\n解析过程：\n```golang\nimport (\n\t...\n\t\"github.com/containernetworking/cni/libcni\"  // golang lib SDK\n)\n\nfunc main() {\n\tif len(os.Args) < 4 {  // 判断参数\n\t\tusage()\n\t\treturn\n\t}\n\n\tnetdir := os.Getenv(EnvNetDir)  //加载conf文件地址\n\tif netdir == \"\" {\n\t\tnetdir = DefaultNetDir\n\t}\n\tnetconf, err := libcni.LoadConfList(netdir, os.Args[2])\n\tif err != nil {\n\t\texit(err)\n\t}\n\n\t... \n\n\n\tifName, ok := os.LookupEnv(EnvCNIIfname) // 加载网卡\n\tif !ok {\n\t\tifName = \"eth0\"\n\t}\n\n\t...\n\n\tnetns := os.Args[3]    //获得 new working namespace\n\tnetns, err = filepath.Abs(netns)\n\tif err != nil {\n\t\texit(err)\n\t}\n\n\t...\n\n\t// CNI runtime object\n\tcninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), nil)\n\trt := &libcni.RuntimeConf{\n\t\tContainerID:    fmt.Sprintf(\"cnitool-%x\", ha512.Sum512([]byte(netns))[:10]),\n\t\tNetNS:          netns,\n\t\tIfName:         ifName,\n\t\tArgs:           cniArgs,\n\t\tCapabilityArgs: capabilityArgs,\n\t}\n\n\t...\n\n\t// CNI 具体执行方式\n\tswitch os.Args[1] {\n\tcase CmdAdd:\n\t\tresult, err := cninet.AddNetworkList(context.TODO(), netconf, rt)\n\t\tif result != nil {\n\t\t\t_ = result.Print()\n\t\t}\n\t\texit(err)\n\tcase CmdCheck:\n\t\terr := cninet.CheckNetworkList(context.TODO(), netconf, rt)\n\t\texit(err)\n\tcase CmdDel:\n\t\texit(cninet.DelNetworkList(context.TODO(), netconf, rt))\n\t}\n}\n\n```\n\n## Golang libcni SDK\nSDK核心的interface 接口定义：\n```golang\nimport(\n\t\"github.com/containernetworking/cni/pkg/invoke\" //syscall 具体调用\n\t\"github.com/containernetworking/cni/pkg/types\" // 网络adapter管理，使用Plugin Chains模型进行关联\n\t\"github.com/containernetworking/cni/pkg/utils\" // 公共方法：cni conf file中各个字段ValidCheck\n\t\"github.com/containernetworking/cni/pkg/version\" // version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容\n)\ntype CNI interface {\n\tAddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)\n\tCheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error\n\tDelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error\n\tGetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)\n\tGetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]byte, *RuntimeConf, error)\n\n\t//以下3个最核心接口\n\tAddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)\n\tCheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error\n\tDelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error\n\n\tGetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)\n\tGetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]byte, *RuntimeConf, error)\n\n\tValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]string, error)\n\tValidateNetwork(ctx context.Context, net *NetworkConfig) ([]string, error)\n}\n\ntype CNIConfig struct {\n\tPath     []string\n\texec     invoke.Exec\n\tcacheDir string\n}\n\nvar _ CNI = &CNIConfig{} // *注意，将CNIConfig{}对象指针都是CNI接口的实现实例；\n```\n\n### 核心接口分析\n```golang\nfunc (c *CNIConfig) addNetwork(ctx context.Context, name, cniVersion string, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf) (types.Result, error) {\n\tc.ensureExec()  // 添加数据平台\n\tpluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateContainerID(rt.ContainerID); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateNetworkName(name); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateInterfaceName(rt.IfName); err != nil {\n\t\treturn nil, err\n\t}\n\n\tnewConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(\"ADD\", rt), c.exec) //执行了Plugin 注入os.Exec\n}\n\ntype RawExec struct {\n\tStderr io.Writer\n}\n\nfunc (e *RawExec) ExecPlugin(ctx context.Context, pluginPath string, stdinData []byte, environ []string) ([]byte, error) {\n\tstdout := &bytes.Buffer{}\n\tc := exec.CommandContext(ctx, pluginPath)\n\tc.Env = environ\n\tc.Stdin = bytes.NewBuffer(stdinData)\n\tc.Stdout = stdout\n\tc.Stderr = e.Stderr\n\tif err := c.Run(); err != nil {\n\t\treturn nil, pluginErr(err, stdout.Bytes())\n\t}\n\n\treturn stdout.Bytes(), nil\n}\n\nfunc pluginErr(err error, output []byte) error {\n\tif exitError, ok := err.(*exec.ExitError); ok {\n\t\temsg := types.Error{}\n\t\tif len(output) == 0 {\n\t\t\tif len(exitError.Stderr) == 0 {\n\t\t\t\temsg.Msg = \"netplugin failed with no error message\"\n\t\t\t} else {\n\t\t\t\temsg.Msg = fmt.Sprintf(\"netplugin failed: %q\", string(exitError.Stderr))\n\t\t\t}\n\t\t} else if perr := json.Unmarshal(output, &emsg); perr != nil {\n\t\t\temsg.Msg = fmt.Sprintf(\"netplugin failed but error parsing its diagnostic message %q: %v\", string(output), perr)\n\t\t}\n\t\treturn &emsg\n\t}\n\n\treturn err\n}\n\nfunc (e *RawExec) FindInPath(plugin string, paths []string) (string, error) {\n\treturn FindInPath(plugin, paths)\n}\n```\n\n将数据接入到Os kernel数据\n\n","source":"_posts/CNI1.md","raw":"---\ntitle: CNI (二)\ndate: 2020-01-19 14:59:21\ntags: K8S, Container Network Interface\ndescription: 目前K8s中使用比较多的CNI Plugin插件；简单介绍；\n---\n\n# CNI（第二篇）\n\n## 介绍\n\nCNI（容器网络接口）是一个规范SPEC。 如何配置调用： 请查看[CNI SPEC](https://github.com/containernetworking/cni/blob/master/SPEC.md)\n\nCNI包括几部分： \n\n> golang SDK Lib, 用于集成实现网络通信接口；\n\n> Template，用于生成自定义的CNI插件，标准代码工程；\n\n> 标准Document，包括社区公约、描述、roadmaps、milestone等\n\n## 使用方式\n\n### cnitool 介绍\n\ncnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。\n\n```golang\nconst (\n\tEnvCNIPath        = \"CNI_PATH\"   //CNI Adapter bin文件路径（bin的编译需要去掉cgo）\n\tEnvNetDir         = \"NETCONFPATH\"  //部署（添加、删除、检查）adapter需要的json配置文件路径\n\tEnvCapabilityArgs = \"CAP_ARGS\"  // CAP 参数\n\tEnvCNIArgs        = \"CNI_ARGS\"  // adapter 外部传递的参数，一般不用，将args放在json文件中\n\tEnvCNIIfname      = \"CNI_IFNAME\"  // 设置的容器网卡名称，如eth0\n\n\tDefaultNetDir = \"/etc/cni/net.d\" // 默认CNI 插件路径\n\n\t// 以下部分是 插件 添加方式\n\tCmdAdd   = \"add\"\n\tCmdCheck = \"check\"\n\tCmdDel   = \"del\"\n)\n```\n\n### 插件使用\n\n准备二进制插件：\n```bash\ngo get github.com/containernetworking/plugins\ngo build ptp -o myptp\n```\n\n\n准备网络配置：\n```bash\necho `\n{\n\t\"cniVersion\": \"0.4.0\",\n\t\"name\": \"myptp\",\n\t\"type\": \"ptp\",  //veth pair\n\t\"ipMasq\": true,\n\t\"ipam\": {\n\t\t\"type\": \"host-local\",\n\t\t\"subnet\": \"172.16.29.0/24\",\n\t\t\"routes\": [{\n\t\t\t\"dst\": \"0.0.0.0/0\"\n\t\t}]\n\t}\n}` > /etc/cni/net.d/myptp.conflist\n```\n\n准备好配置后部署容器网络：\n\n第一步：创建网络Namespace， 添加名称为mytest_network\n```bash\nsudo ip netns add mytest_network\n```\n\n第二步：添加容器网络myptp\n```bash\nsudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network\n```\n\n第三步：调测网络\n```bash\nsudo ip -n mytest_network addr\nsudo ip netns exec mytest_network ping -c 1 4.2.2.2\n```\n\n最后，清理网络\n```bash\nsudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network\nsudo ip netns del mytest_network\n```\n\n### cnitool调用插件\n正如上面的例子：`cnitool add myptp /var/run/netns/mytest_network`\n> 参数0是cnitool工具名称\n> 参数1是操作名称（add、del、check）\n> 参数3是加载的配置对象 `myptp.*` 文件对象\n> 参数4是 net namespace 名称\n\n解析过程：\n```golang\nimport (\n\t...\n\t\"github.com/containernetworking/cni/libcni\"  // golang lib SDK\n)\n\nfunc main() {\n\tif len(os.Args) < 4 {  // 判断参数\n\t\tusage()\n\t\treturn\n\t}\n\n\tnetdir := os.Getenv(EnvNetDir)  //加载conf文件地址\n\tif netdir == \"\" {\n\t\tnetdir = DefaultNetDir\n\t}\n\tnetconf, err := libcni.LoadConfList(netdir, os.Args[2])\n\tif err != nil {\n\t\texit(err)\n\t}\n\n\t... \n\n\n\tifName, ok := os.LookupEnv(EnvCNIIfname) // 加载网卡\n\tif !ok {\n\t\tifName = \"eth0\"\n\t}\n\n\t...\n\n\tnetns := os.Args[3]    //获得 new working namespace\n\tnetns, err = filepath.Abs(netns)\n\tif err != nil {\n\t\texit(err)\n\t}\n\n\t...\n\n\t// CNI runtime object\n\tcninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), nil)\n\trt := &libcni.RuntimeConf{\n\t\tContainerID:    fmt.Sprintf(\"cnitool-%x\", ha512.Sum512([]byte(netns))[:10]),\n\t\tNetNS:          netns,\n\t\tIfName:         ifName,\n\t\tArgs:           cniArgs,\n\t\tCapabilityArgs: capabilityArgs,\n\t}\n\n\t...\n\n\t// CNI 具体执行方式\n\tswitch os.Args[1] {\n\tcase CmdAdd:\n\t\tresult, err := cninet.AddNetworkList(context.TODO(), netconf, rt)\n\t\tif result != nil {\n\t\t\t_ = result.Print()\n\t\t}\n\t\texit(err)\n\tcase CmdCheck:\n\t\terr := cninet.CheckNetworkList(context.TODO(), netconf, rt)\n\t\texit(err)\n\tcase CmdDel:\n\t\texit(cninet.DelNetworkList(context.TODO(), netconf, rt))\n\t}\n}\n\n```\n\n## Golang libcni SDK\nSDK核心的interface 接口定义：\n```golang\nimport(\n\t\"github.com/containernetworking/cni/pkg/invoke\" //syscall 具体调用\n\t\"github.com/containernetworking/cni/pkg/types\" // 网络adapter管理，使用Plugin Chains模型进行关联\n\t\"github.com/containernetworking/cni/pkg/utils\" // 公共方法：cni conf file中各个字段ValidCheck\n\t\"github.com/containernetworking/cni/pkg/version\" // version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容\n)\ntype CNI interface {\n\tAddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)\n\tCheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error\n\tDelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error\n\tGetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)\n\tGetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]byte, *RuntimeConf, error)\n\n\t//以下3个最核心接口\n\tAddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)\n\tCheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error\n\tDelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error\n\n\tGetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)\n\tGetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]byte, *RuntimeConf, error)\n\n\tValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]string, error)\n\tValidateNetwork(ctx context.Context, net *NetworkConfig) ([]string, error)\n}\n\ntype CNIConfig struct {\n\tPath     []string\n\texec     invoke.Exec\n\tcacheDir string\n}\n\nvar _ CNI = &CNIConfig{} // *注意，将CNIConfig{}对象指针都是CNI接口的实现实例；\n```\n\n### 核心接口分析\n```golang\nfunc (c *CNIConfig) addNetwork(ctx context.Context, name, cniVersion string, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf) (types.Result, error) {\n\tc.ensureExec()  // 添加数据平台\n\tpluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateContainerID(rt.ContainerID); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateNetworkName(name); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := utils.ValidateInterfaceName(rt.IfName); err != nil {\n\t\treturn nil, err\n\t}\n\n\tnewConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(\"ADD\", rt), c.exec) //执行了Plugin 注入os.Exec\n}\n\ntype RawExec struct {\n\tStderr io.Writer\n}\n\nfunc (e *RawExec) ExecPlugin(ctx context.Context, pluginPath string, stdinData []byte, environ []string) ([]byte, error) {\n\tstdout := &bytes.Buffer{}\n\tc := exec.CommandContext(ctx, pluginPath)\n\tc.Env = environ\n\tc.Stdin = bytes.NewBuffer(stdinData)\n\tc.Stdout = stdout\n\tc.Stderr = e.Stderr\n\tif err := c.Run(); err != nil {\n\t\treturn nil, pluginErr(err, stdout.Bytes())\n\t}\n\n\treturn stdout.Bytes(), nil\n}\n\nfunc pluginErr(err error, output []byte) error {\n\tif exitError, ok := err.(*exec.ExitError); ok {\n\t\temsg := types.Error{}\n\t\tif len(output) == 0 {\n\t\t\tif len(exitError.Stderr) == 0 {\n\t\t\t\temsg.Msg = \"netplugin failed with no error message\"\n\t\t\t} else {\n\t\t\t\temsg.Msg = fmt.Sprintf(\"netplugin failed: %q\", string(exitError.Stderr))\n\t\t\t}\n\t\t} else if perr := json.Unmarshal(output, &emsg); perr != nil {\n\t\t\temsg.Msg = fmt.Sprintf(\"netplugin failed but error parsing its diagnostic message %q: %v\", string(output), perr)\n\t\t}\n\t\treturn &emsg\n\t}\n\n\treturn err\n}\n\nfunc (e *RawExec) FindInPath(plugin string, paths []string) (string, error) {\n\treturn FindInPath(plugin, paths)\n}\n```\n\n将数据接入到Os kernel数据\n\n","slug":"CNI1","published":1,"updated":"2020-01-19T07:34:07.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5lyqwvu00060d5p6izl5eih","content":"<h1 id=\"CNI（第二篇）\"><a href=\"#CNI（第二篇）\" class=\"headerlink\" title=\"CNI（第二篇）\"></a>CNI（第二篇）</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>CNI（容器网络接口）是一个规范SPEC。 如何配置调用： 请查看<a href=\"https://github.com/containernetworking/cni/blob/master/SPEC.md\" target=\"_blank\" rel=\"noopener\">CNI SPEC</a></p>\n<p>CNI包括几部分： </p>\n<blockquote>\n<p>golang SDK Lib, 用于集成实现网络通信接口；</p>\n</blockquote>\n<blockquote>\n<p>Template，用于生成自定义的CNI插件，标准代码工程；</p>\n</blockquote>\n<blockquote>\n<p>标准Document，包括社区公约、描述、roadmaps、milestone等</p>\n</blockquote>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h3 id=\"cnitool-介绍\"><a href=\"#cnitool-介绍\" class=\"headerlink\" title=\"cnitool 介绍\"></a>cnitool 介绍</h3><p>cnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tEnvCNIPath        = <span class=\"string\">\"CNI_PATH\"</span>   <span class=\"comment\">//CNI Adapter bin文件路径（bin的编译需要去掉cgo）</span></span><br><span class=\"line\">\tEnvNetDir         = <span class=\"string\">\"NETCONFPATH\"</span>  <span class=\"comment\">//部署（添加、删除、检查）adapter需要的json配置文件路径</span></span><br><span class=\"line\">\tEnvCapabilityArgs = <span class=\"string\">\"CAP_ARGS\"</span>  <span class=\"comment\">// CAP 参数</span></span><br><span class=\"line\">\tEnvCNIArgs        = <span class=\"string\">\"CNI_ARGS\"</span>  <span class=\"comment\">// adapter 外部传递的参数，一般不用，将args放在json文件中</span></span><br><span class=\"line\">\tEnvCNIIfname      = <span class=\"string\">\"CNI_IFNAME\"</span>  <span class=\"comment\">// 设置的容器网卡名称，如eth0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tDefaultNetDir = <span class=\"string\">\"/etc/cni/net.d\"</span> <span class=\"comment\">// 默认CNI 插件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 以下部分是 插件 添加方式</span></span><br><span class=\"line\">\tCmdAdd   = <span class=\"string\">\"add\"</span></span><br><span class=\"line\">\tCmdCheck = <span class=\"string\">\"check\"</span></span><br><span class=\"line\">\tCmdDel   = <span class=\"string\">\"del\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h3><p>准备二进制插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/containernetworking/plugins</span><br><span class=\"line\">go build ptp -o myptp</span><br></pre></td></tr></table></figure>\n\n\n<p>准备网络配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> `</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"cniVersion\"</span>: <span class=\"string\">\"0.4.0\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span>: <span class=\"string\">\"myptp\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"ptp\"</span>,  //veth pair</span><br><span class=\"line\">\t<span class=\"string\">\"ipMasq\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"ipam\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"host-local\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"subnet\"</span>: <span class=\"string\">\"172.16.29.0/24\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"routes\"</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"dst\"</span>: <span class=\"string\">\"0.0.0.0/0\"</span></span><br><span class=\"line\">\t\t&#125;]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;` &gt; /etc/cni/net.d/myptp.conflist</span><br></pre></td></tr></table></figure>\n\n<p>准备好配置后部署容器网络：</p>\n<p>第一步：创建网络Namespace， 添加名称为mytest_network</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns add mytest_network</span><br></pre></td></tr></table></figure>\n\n<p>第二步：添加容器网络myptp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network</span><br></pre></td></tr></table></figure>\n\n<p>第三步：调测网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip -n mytest_network addr</span><br><span class=\"line\">sudo ip netns <span class=\"built_in\">exec</span> mytest_network ping -c 1 4.2.2.2</span><br></pre></td></tr></table></figure>\n\n<p>最后，清理网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network</span><br><span class=\"line\">sudo ip netns del mytest_network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cnitool调用插件\"><a href=\"#cnitool调用插件\" class=\"headerlink\" title=\"cnitool调用插件\"></a>cnitool调用插件</h3><p>正如上面的例子：<code>cnitool add myptp /var/run/netns/mytest_network</code></p>\n<blockquote>\n<p>参数0是cnitool工具名称<br>参数1是操作名称（add、del、check）<br>参数3是加载的配置对象 <code>myptp.*</code> 文件对象<br>参数4是 net namespace 名称</p>\n</blockquote>\n<p>解析过程：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/libcni\"</span>  <span class=\"comment\">// golang lib SDK</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &lt; <span class=\"number\">4</span> &#123;  <span class=\"comment\">// 判断参数</span></span><br><span class=\"line\">\t\tusage()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetdir := os.Getenv(EnvNetDir)  <span class=\"comment\">//加载conf文件地址</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> netdir == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\tnetdir = DefaultNetDir</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnetconf, err := libcni.LoadConfList(netdir, os.Args[<span class=\"number\">2</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t... </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tifName, ok := os.LookupEnv(EnvCNIIfname) <span class=\"comment\">// 加载网卡</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tifName = <span class=\"string\">\"eth0\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetns := os.Args[<span class=\"number\">3</span>]    <span class=\"comment\">//获得 new working namespace</span></span><br><span class=\"line\">\tnetns, err = filepath.Abs(netns)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// CNI runtime object</span></span><br><span class=\"line\">\tcninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\trt := &amp;libcni.RuntimeConf&#123;</span><br><span class=\"line\">\t\tContainerID:    fmt.Sprintf(<span class=\"string\">\"cnitool-%x\"</span>, ha512.Sum512([]<span class=\"keyword\">byte</span>(netns))[:<span class=\"number\">10</span>]),</span><br><span class=\"line\">\t\tNetNS:          netns,</span><br><span class=\"line\">\t\tIfName:         ifName,</span><br><span class=\"line\">\t\tArgs:           cniArgs,</span><br><span class=\"line\">\t\tCapabilityArgs: capabilityArgs,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// CNI 具体执行方式</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> os.Args[<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdAdd:</span><br><span class=\"line\">\t\tresult, err := cninet.AddNetworkList(context.TODO(), netconf, rt)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> result != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t_ = result.Print()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdCheck:</span><br><span class=\"line\">\t\terr := cninet.CheckNetworkList(context.TODO(), netconf, rt)</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdDel:</span><br><span class=\"line\">\t\texit(cninet.DelNetworkList(context.TODO(), netconf, rt))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Golang-libcni-SDK\"><a href=\"#Golang-libcni-SDK\" class=\"headerlink\" title=\"Golang libcni SDK\"></a>Golang libcni SDK</h2><p>SDK核心的interface 接口定义：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/invoke\"</span> <span class=\"comment\">//syscall 具体调用</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/types\"</span> <span class=\"comment\">// 网络adapter管理，使用Plugin Chains模型进行关联</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/utils\"</span> <span class=\"comment\">// 公共方法：cni conf file中各个字段ValidCheck</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/version\"</span> <span class=\"comment\">// version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> CNI <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tCheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class=\"line\">\tDelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class=\"line\">\tGetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tGetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]<span class=\"keyword\">byte</span>, *RuntimeConf, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//以下3个最核心接口</span></span><br><span class=\"line\">\tAddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tCheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class=\"line\">\tDelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class=\"line\"></span><br><span class=\"line\">\tGetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tGetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]<span class=\"keyword\">byte</span>, *RuntimeConf, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\tValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">\tValidateNetwork(ctx context.Context, net *NetworkConfig) ([]<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CNIConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPath     []<span class=\"keyword\">string</span></span><br><span class=\"line\">\texec     invoke.Exec</span><br><span class=\"line\">\tcacheDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ CNI = &amp;CNIConfig&#123;&#125; <span class=\"comment\">// *注意，将CNIConfig&#123;&#125;对象指针都是CNI接口的实现实例；</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心接口分析\"><a href=\"#核心接口分析\" class=\"headerlink\" title=\"核心接口分析\"></a>核心接口分析</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *CNIConfig)</span> <span class=\"title\">addNetwork</span><span class=\"params\">(ctx context.Context, name, cniVersion <span class=\"keyword\">string</span>, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf)</span> <span class=\"params\">(types.Result, error)</span></span> &#123;</span><br><span class=\"line\">\tc.ensureExec()  <span class=\"comment\">// 添加数据平台</span></span><br><span class=\"line\">\tpluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateContainerID(rt.ContainerID); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateNetworkName(name); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateInterfaceName(rt.IfName); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(<span class=\"string\">\"ADD\"</span>, rt), c.exec) <span class=\"comment\">//执行了Plugin 注入os.Exec</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RawExec <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tStderr io.Writer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *RawExec)</span> <span class=\"title\">ExecPlugin</span><span class=\"params\">(ctx context.Context, pluginPath <span class=\"keyword\">string</span>, stdinData []<span class=\"keyword\">byte</span>, environ []<span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tstdout := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">\tc := exec.CommandContext(ctx, pluginPath)</span><br><span class=\"line\">\tc.Env = environ</span><br><span class=\"line\">\tc.Stdin = bytes.NewBuffer(stdinData)</span><br><span class=\"line\">\tc.Stdout = stdout</span><br><span class=\"line\">\tc.Stderr = e.Stderr</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.Run(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, pluginErr(err, stdout.Bytes())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stdout.Bytes(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pluginErr</span><span class=\"params\">(err error, output []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exitError, ok := err.(*exec.ExitError); ok &#123;</span><br><span class=\"line\">\t\temsg := types.Error&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(output) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(exitError.Stderr) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\temsg.Msg = <span class=\"string\">\"netplugin failed with no error message\"</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\temsg.Msg = fmt.Sprintf(<span class=\"string\">\"netplugin failed: %q\"</span>, <span class=\"keyword\">string</span>(exitError.Stderr))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> perr := json.Unmarshal(output, &amp;emsg); perr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\temsg.Msg = fmt.Sprintf(<span class=\"string\">\"netplugin failed but error parsing its diagnostic message %q: %v\"</span>, <span class=\"keyword\">string</span>(output), perr)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;emsg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *RawExec)</span> <span class=\"title\">FindInPath</span><span class=\"params\">(plugin <span class=\"keyword\">string</span>, paths []<span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FindInPath(plugin, paths)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将数据接入到Os kernel数据</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CNI（第二篇）\"><a href=\"#CNI（第二篇）\" class=\"headerlink\" title=\"CNI（第二篇）\"></a>CNI（第二篇）</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>CNI（容器网络接口）是一个规范SPEC。 如何配置调用： 请查看<a href=\"https://github.com/containernetworking/cni/blob/master/SPEC.md\" target=\"_blank\" rel=\"noopener\">CNI SPEC</a></p>\n<p>CNI包括几部分： </p>\n<blockquote>\n<p>golang SDK Lib, 用于集成实现网络通信接口；</p>\n</blockquote>\n<blockquote>\n<p>Template，用于生成自定义的CNI插件，标准代码工程；</p>\n</blockquote>\n<blockquote>\n<p>标准Document，包括社区公约、描述、roadmaps、milestone等</p>\n</blockquote>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h3 id=\"cnitool-介绍\"><a href=\"#cnitool-介绍\" class=\"headerlink\" title=\"cnitool 介绍\"></a>cnitool 介绍</h3><p>cnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tEnvCNIPath        = <span class=\"string\">\"CNI_PATH\"</span>   <span class=\"comment\">//CNI Adapter bin文件路径（bin的编译需要去掉cgo）</span></span><br><span class=\"line\">\tEnvNetDir         = <span class=\"string\">\"NETCONFPATH\"</span>  <span class=\"comment\">//部署（添加、删除、检查）adapter需要的json配置文件路径</span></span><br><span class=\"line\">\tEnvCapabilityArgs = <span class=\"string\">\"CAP_ARGS\"</span>  <span class=\"comment\">// CAP 参数</span></span><br><span class=\"line\">\tEnvCNIArgs        = <span class=\"string\">\"CNI_ARGS\"</span>  <span class=\"comment\">// adapter 外部传递的参数，一般不用，将args放在json文件中</span></span><br><span class=\"line\">\tEnvCNIIfname      = <span class=\"string\">\"CNI_IFNAME\"</span>  <span class=\"comment\">// 设置的容器网卡名称，如eth0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tDefaultNetDir = <span class=\"string\">\"/etc/cni/net.d\"</span> <span class=\"comment\">// 默认CNI 插件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 以下部分是 插件 添加方式</span></span><br><span class=\"line\">\tCmdAdd   = <span class=\"string\">\"add\"</span></span><br><span class=\"line\">\tCmdCheck = <span class=\"string\">\"check\"</span></span><br><span class=\"line\">\tCmdDel   = <span class=\"string\">\"del\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h3><p>准备二进制插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/containernetworking/plugins</span><br><span class=\"line\">go build ptp -o myptp</span><br></pre></td></tr></table></figure>\n\n\n<p>准备网络配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> `</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"cniVersion\"</span>: <span class=\"string\">\"0.4.0\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span>: <span class=\"string\">\"myptp\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"ptp\"</span>,  //veth pair</span><br><span class=\"line\">\t<span class=\"string\">\"ipMasq\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"ipam\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"host-local\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"subnet\"</span>: <span class=\"string\">\"172.16.29.0/24\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"routes\"</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"dst\"</span>: <span class=\"string\">\"0.0.0.0/0\"</span></span><br><span class=\"line\">\t\t&#125;]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;` &gt; /etc/cni/net.d/myptp.conflist</span><br></pre></td></tr></table></figure>\n\n<p>准备好配置后部署容器网络：</p>\n<p>第一步：创建网络Namespace， 添加名称为mytest_network</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns add mytest_network</span><br></pre></td></tr></table></figure>\n\n<p>第二步：添加容器网络myptp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network</span><br></pre></td></tr></table></figure>\n\n<p>第三步：调测网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip -n mytest_network addr</span><br><span class=\"line\">sudo ip netns <span class=\"built_in\">exec</span> mytest_network ping -c 1 4.2.2.2</span><br></pre></td></tr></table></figure>\n\n<p>最后，清理网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network</span><br><span class=\"line\">sudo ip netns del mytest_network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cnitool调用插件\"><a href=\"#cnitool调用插件\" class=\"headerlink\" title=\"cnitool调用插件\"></a>cnitool调用插件</h3><p>正如上面的例子：<code>cnitool add myptp /var/run/netns/mytest_network</code></p>\n<blockquote>\n<p>参数0是cnitool工具名称<br>参数1是操作名称（add、del、check）<br>参数3是加载的配置对象 <code>myptp.*</code> 文件对象<br>参数4是 net namespace 名称</p>\n</blockquote>\n<p>解析过程：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/libcni\"</span>  <span class=\"comment\">// golang lib SDK</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &lt; <span class=\"number\">4</span> &#123;  <span class=\"comment\">// 判断参数</span></span><br><span class=\"line\">\t\tusage()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetdir := os.Getenv(EnvNetDir)  <span class=\"comment\">//加载conf文件地址</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> netdir == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\tnetdir = DefaultNetDir</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnetconf, err := libcni.LoadConfList(netdir, os.Args[<span class=\"number\">2</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t... </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tifName, ok := os.LookupEnv(EnvCNIIfname) <span class=\"comment\">// 加载网卡</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tifName = <span class=\"string\">\"eth0\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetns := os.Args[<span class=\"number\">3</span>]    <span class=\"comment\">//获得 new working namespace</span></span><br><span class=\"line\">\tnetns, err = filepath.Abs(netns)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// CNI runtime object</span></span><br><span class=\"line\">\tcninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\trt := &amp;libcni.RuntimeConf&#123;</span><br><span class=\"line\">\t\tContainerID:    fmt.Sprintf(<span class=\"string\">\"cnitool-%x\"</span>, ha512.Sum512([]<span class=\"keyword\">byte</span>(netns))[:<span class=\"number\">10</span>]),</span><br><span class=\"line\">\t\tNetNS:          netns,</span><br><span class=\"line\">\t\tIfName:         ifName,</span><br><span class=\"line\">\t\tArgs:           cniArgs,</span><br><span class=\"line\">\t\tCapabilityArgs: capabilityArgs,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// CNI 具体执行方式</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> os.Args[<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdAdd:</span><br><span class=\"line\">\t\tresult, err := cninet.AddNetworkList(context.TODO(), netconf, rt)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> result != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t_ = result.Print()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdCheck:</span><br><span class=\"line\">\t\terr := cninet.CheckNetworkList(context.TODO(), netconf, rt)</span><br><span class=\"line\">\t\texit(err)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CmdDel:</span><br><span class=\"line\">\t\texit(cninet.DelNetworkList(context.TODO(), netconf, rt))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Golang-libcni-SDK\"><a href=\"#Golang-libcni-SDK\" class=\"headerlink\" title=\"Golang libcni SDK\"></a>Golang libcni SDK</h2><p>SDK核心的interface 接口定义：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/invoke\"</span> <span class=\"comment\">//syscall 具体调用</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/types\"</span> <span class=\"comment\">// 网络adapter管理，使用Plugin Chains模型进行关联</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/utils\"</span> <span class=\"comment\">// 公共方法：cni conf file中各个字段ValidCheck</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/containernetworking/cni/pkg/version\"</span> <span class=\"comment\">// version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> CNI <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tCheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class=\"line\">\tDelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class=\"line\">\tGetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tGetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]<span class=\"keyword\">byte</span>, *RuntimeConf, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//以下3个最核心接口</span></span><br><span class=\"line\">\tAddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tCheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class=\"line\">\tDelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class=\"line\"></span><br><span class=\"line\">\tGetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class=\"line\">\tGetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]<span class=\"keyword\">byte</span>, *RuntimeConf, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\tValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">\tValidateNetwork(ctx context.Context, net *NetworkConfig) ([]<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CNIConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPath     []<span class=\"keyword\">string</span></span><br><span class=\"line\">\texec     invoke.Exec</span><br><span class=\"line\">\tcacheDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ CNI = &amp;CNIConfig&#123;&#125; <span class=\"comment\">// *注意，将CNIConfig&#123;&#125;对象指针都是CNI接口的实现实例；</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心接口分析\"><a href=\"#核心接口分析\" class=\"headerlink\" title=\"核心接口分析\"></a>核心接口分析</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *CNIConfig)</span> <span class=\"title\">addNetwork</span><span class=\"params\">(ctx context.Context, name, cniVersion <span class=\"keyword\">string</span>, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf)</span> <span class=\"params\">(types.Result, error)</span></span> &#123;</span><br><span class=\"line\">\tc.ensureExec()  <span class=\"comment\">// 添加数据平台</span></span><br><span class=\"line\">\tpluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateContainerID(rt.ContainerID); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateNetworkName(name); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := utils.ValidateInterfaceName(rt.IfName); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(<span class=\"string\">\"ADD\"</span>, rt), c.exec) <span class=\"comment\">//执行了Plugin 注入os.Exec</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RawExec <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tStderr io.Writer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *RawExec)</span> <span class=\"title\">ExecPlugin</span><span class=\"params\">(ctx context.Context, pluginPath <span class=\"keyword\">string</span>, stdinData []<span class=\"keyword\">byte</span>, environ []<span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tstdout := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">\tc := exec.CommandContext(ctx, pluginPath)</span><br><span class=\"line\">\tc.Env = environ</span><br><span class=\"line\">\tc.Stdin = bytes.NewBuffer(stdinData)</span><br><span class=\"line\">\tc.Stdout = stdout</span><br><span class=\"line\">\tc.Stderr = e.Stderr</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.Run(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, pluginErr(err, stdout.Bytes())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stdout.Bytes(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pluginErr</span><span class=\"params\">(err error, output []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exitError, ok := err.(*exec.ExitError); ok &#123;</span><br><span class=\"line\">\t\temsg := types.Error&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(output) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(exitError.Stderr) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\temsg.Msg = <span class=\"string\">\"netplugin failed with no error message\"</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\temsg.Msg = fmt.Sprintf(<span class=\"string\">\"netplugin failed: %q\"</span>, <span class=\"keyword\">string</span>(exitError.Stderr))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> perr := json.Unmarshal(output, &amp;emsg); perr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\temsg.Msg = fmt.Sprintf(<span class=\"string\">\"netplugin failed but error parsing its diagnostic message %q: %v\"</span>, <span class=\"keyword\">string</span>(output), perr)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;emsg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *RawExec)</span> <span class=\"title\">FindInPath</span><span class=\"params\">(plugin <span class=\"keyword\">string</span>, paths []<span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FindInPath(plugin, paths)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将数据接入到Os kernel数据</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck5lyqwvc00010d5pbwmgh6r9","tag_id":"ck5lyqwvr00050d5pcop87bj8","_id":"ck5lyqww5000b0d5p44drb9b5"},{"post_id":"ck5lyqwvu00060d5p6izl5eih","tag_id":"ck5lyqwvr00050d5pcop87bj8","_id":"ck5lyqww7000d0d5pgh629hya"}],"Tag":[{"name":"K8S, Container Network Interface","_id":"ck5lyqwvr00050d5pcop87bj8"}]}}